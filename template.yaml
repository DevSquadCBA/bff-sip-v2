AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'Sistema integral Piatti backend en typescript'

Parameters:
    Environment:
        Type: String
        Description: 'entorno de ejecución'
        AllowedValues:
            - develop
            - prod
    RetentionInDays:
        Type: Number
        Description: Retention in days cloudwatch logs
        Default: '7'
    Debug:
        Type: String
        Description: Debug mode for logs
        Default: 'false'
        AllowedValues:
            - true
            - false

Globals:
    Function:
        Runtime: nodejs18.x
        Timeout: 30
        MemorySize: 128
        Environment:
            Variables:
                HOST: !Sub '{{resolve:ssm:/host}}'
                USER: !Sub '{{resolve:ssm:/user}}'
                PASS: !Sub '{{resolve:ssm:/pass}}'
                DB:   !Sub '{{resolve:ssm:/${Environment}/database}}'
                JWT:  !Sub '{{resolve:ssm:/${Environment}/JWT}}'
                DEFAULT_LIMIT: 100 # El límite de recursos que trae por defecto
                NODE_CONFIG_DIR: !Sub '/opt/nodejs/config/'
                NODE_ENV: !Ref Environment
                NODE_OPTIONS: --enable-source-maps
                LAYER: '/opt/nodejs'
                LOCAL: 'false'
                DEBUG: !Ref Debug

Conditions:
    IsProduction:
        Fn::Equals: [Ref: Environment, prod]
    DefinedDomainName:
        Fn::Not:
            - Fn::Equals:
                - Fn::FindInMap: ['Stage', Ref: Environment, 'DomainName']
                - ''
    CreateDomainName:
        Condition: DefinedDomainName

### ENV VARS ###
Mappings:
    Stage:
        develop:
            DomainName: "dev-sip.piatti-erp.com" # Placeholder, lo reemplazaremos en `BasePathMapping`
            Value: Develop
        prod:
            DomainName: "sip.piatti-erp.com" # Placeholder
            Value: Production

    Static:
        Parameters:
            FilterPattern: '[event=REPORT* || event="*DATADOG_EVENT*"]'


Resources:
    GetParametersRole:
        Type: 'AWS::IAM::Role'
        Properties:
            AssumeRolePolicyDocument:
                Version: '2012-10-17'
                Statement:
                    - Effect: 'Allow'
                      Principal:
                        Service:
                            - 'lambda.amazonaws.com'
                      Action:
                        - 'sts:AssumeRole'
            Path: '/'
            ManagedPolicyArns:
                - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
            RoleName: !Sub '${Environment}-GetParametersRole'
            Policies:
                - PolicyName: ReadSsmParameters
                  PolicyDocument:
                      Version: '2012-10-17'
                      Statement:
                          - Effect: Allow
                            Action:
                                - ssm:GetParameter
                                - ssm:GetParameters
                            Resource:
                                Fn::Sub: arn:aws:ssm:*:${AWS::AccountId}:parameter/${Environment}/*
    PiattiRestApi:
        Type: AWS::Serverless::Api
        Properties:
#            ApiId: gyl18gwcs5
            StageName: !Ref Environment
            Name: !Sub ${AWS::StackName}-api
            OpenApiVersion: 3.0.1
            TracingEnabled: true
            Cors:
                AllowOrigin:  "'*'"
                AllowHeaders: "'*'" 
            DefinitionBody:
                Fn::Transform:
                    Name: AWS::Include
                    Parameters:
                        Location: ./swagger.yaml
    # BasePathMapping:
    #     Type: AWS::ApiGateway::BasePathMapping
    #     DependsOn: PiattiRestApi
    #     Condition: CreateDomainName
    #     Properties:
    #         BasePath: 'api'
    #         DomainName: !FindInMap 
    #             - Stage
    #             - !Ref Environment
    #             - DomainName
    #         RestApiId: !Ref PiattiRestApi
    #         Stage: !Ref PiattiRestApi.Stage    
    BasePathMapping:
        Type: AWS::ApiGateway::BasePathMapping
        DependsOn: PiattiRestApi
        Condition: CreateDomainName
        Properties:
            DomainName: 
                Fn::ImportValue: !Sub "ApiGatewayDomain${Environment}"
            RestApiId: !Ref PiattiRestApi
            Stage: !Ref PiattiRestApi.Stage    
            BasePath: 'api'

# Layers
    Mysql2Layer:
        Type: AWS::Serverless::LayerVersion
        Properties:
            LayerName: !Sub '${Environment}-MysqlLayer'
            Description: 'Layer que contiene mysql2'
            ContentUri: ./src/layers/nodejs
            CompatibleRuntimes:
                - nodejs16.x
# Health

    HealthFunction:
        Type: AWS::Serverless::Function
        Metadata:
            BuildMethod: esbuild
            BuildProperties:
                Minify: true
                Sourcemap: true
                MainFields: "module,main"
        Properties:
            FunctionName: !Sub '${Environment}-Health'
            Handler: health.Handler
            CodeUri: ./src/functions/utils
            Events:
                HttpEvent:
                    Type: HttpApi
                    Properties:
                        Path: /health
                        Method: GET
                        ApiId: !Ref PiattiRestApi

# Admin
    SyncDbFunction:
        Type: AWS::Serverless::Function
        Metadata:
            BuildMethod: esbuild
            BuildProperties:
                Minify: false
                Sourcemap: true
                MainFields: "module,main"
        Properties:
            FunctionName: !Sub '${Environment}-SyncDb'
            Handler: syncDb.Handler
            CodeUri: ./src/functions/admin
            Events:
                HttpEvent:
                    Type: HttpApi
                    Properties:
                        Path: /admin/syncDb
                        Method: GET
                        ApiId: !Ref PiattiRestApi
    FakeDataFunction:
        Type: AWS::Serverless::Function
        Metadata:
            BuildMethod: esbuild
            BuildProperties:
                Minify: true
                Sourcemap: true
                MainFields: "module,main"
        Properties:
            FunctionName: !Sub '${Environment}-FakeData'
            Handler: fakeData.Handler
            CodeUri: ./src/functions/admin
            Events:
                HttpEvent:
                    Type: HttpApi
                    Properties:
                        Path: /admin/fakeData
                        Method: GET
                        ApiId: !Ref PiattiRestApi

# Auth
    LoginFunction:
        Type: AWS::Serverless::Function
        Metadata:
            BuildMethod: esbuild
            BuildProperties:
                Minify: true
                Sourcemap: true
                MainFields: "module,main"
        Properties:
            FunctionName: !Sub '${Environment}-Login'
            Handler: login.Handler
            CodeUri: ./src/functions/auth
            Events:
                HttpEvent:
                    Type: HttpApi
                    Properties:
                        Path: /auth/login
                        Method: POST
                        ApiId: !Ref PiattiRestApi

# Users
    GetUsersFunction:
        Type: AWS::Serverless::Function
        Metadata:
            BuildMethod: esbuild
            BuildProperties:
                Minify: true
                Sourcemap: true
                MainFields: "module,main"
        Properties:
            FunctionName: !Sub '${Environment}-GetUsers'
            Handler: getUsers.Handler
            CodeUri: ./src/functions/user
            Events:
                HttpEvent:
                    Type: HttpApi
                    Properties:
                        Path: /user
                        Method: GET
                        ApiId: !Ref PiattiRestApi
    CreateUserFunction:
        Type: AWS::Serverless::Function
        Metadata:
            BuildMethod: esbuild
            BuildProperties:
                Minify: true
                Sourcemap: true
                MainFields: "module,main"
        Properties:
            FunctionName: !Sub '${Environment}-CreateUser'
            Handler: createUser.Handler
            CodeUri: ./src/functions/user
            Events:
                HttpEvent:
                    Type: HttpApi
                    Properties:
                        Path: /user
                        Method: POST
                        ApiId: !Ref PiattiRestApi

# Clients
    GetClientsFunction:
        Type: AWS::Serverless::Function
        Metadata:
            BuildMethod: esbuild
            BuildProperties:
                # MainFields: "module,main"
                Minify: true
                Sourcemap: true
        Properties:
            FunctionName: !Sub '${Environment}-GetClients'
            Handler: getClients.Handler
            CodeUri: ./src/functions/client
            Events:
                HttpEvent:
                    Type: HttpApi
                    Properties:
                        Path: /client
                        Method: GET
                        ApiId: !Ref PiattiRestApi
    GetClientsListFunction:
        Type: AWS::Serverless::Function
        Metadata:
            BuildMethod: esbuild
            BuildProperties:
                MainFields: "module,main"
                Minify: true
                Sourcemap: true
        Properties:
            FunctionName: !Sub '${Environment}-GetClients-List'
            Handler: getClientsList.Handler
            CodeUri: ./src/functions/client
            Events:
                HttpEvent:
                    Type: HttpApi
                    Properties:
                        Path: /clients
                        Method: GET
                        ApiId: !Ref PiattiRestApi
    GetClientByIdFunction:
        Type: AWS::Serverless::Function
        Metadata:
            BuildMethod: esbuild
            BuildProperties:
                Minify: true
                Sourcemap: true
                MainFields: "module,main"
        Properties:
            FunctionName: !Sub '${Environment}-GetClientById'
            Handler: getClientById.Handler
            CodeUri: ./src/functions/client
            Events:
                HttpEvent:
                    Type: HttpApi
                    Properties:
                        Path: /client/{idClient}
                        Method: GET
                        ApiId: !Ref PiattiRestApi
    CreateClientFunction:
        Type: AWS::Serverless::Function
        Metadata:
            BuildMethod: esbuild
            BuildProperties:
                Minify: true
                Sourcemap: true
                MainFields: "module,main"
        Properties:
            FunctionName: !Sub '${Environment}-CreateClient'
            Handler: createClient.Handler
            CodeUri: ./src/functions/client
            Events:
                HttpEvent:
                    Type: HttpApi
                    Properties:
                        Path: /client
                        Method: POST
                        ApiId: !Ref PiattiRestApi
    UpdateClientFunction:
        Type: AWS::Serverless::Function
        Metadata:
            BuildMethod: esbuild
            BuildProperties:
                Minify: true
                Sourcemap: true
                MainFields: "module,main"
        Properties:
            FunctionName: !Sub '${Environment}-UpdateClient'
            Handler: updateClient.Handler
            CodeUri: ./src/functions/client
            Events:
                HttpEvent:
                    Type: HttpApi
                    Properties:
                        Path: /client/{idClient}
                        Method: PUT
                        ApiId: !Ref PiattiRestApi
    DeleteClientFunction:
        Type: AWS::Serverless::Function
        Metadata:
            BuildMethod: esbuild
            BuildProperties:
                Minify: true
                Sourcemap: true
                MainFields: "module,main"
        Properties:
            FunctionName: !Sub '${Environment}-DeleteClient'
            Handler: deleteClient.Handler
            CodeUri: ./src/functions/client
            Events:
                HttpEvent:
                    Type: HttpApi
                    Properties:
                        Path: /client/{idClient}
                        Method: DELETE
                        ApiId: !Ref PiattiRestApi

# Sale
    CreateSaleFunction:
        Type: AWS::Serverless::Function
        Metadata:
            BuildMethod: esbuild
            BuildProperties:
                Minify: true
                Sourcemap: true
                MainFields: "module,main"
        Properties:
            FunctionName: !Sub '${Environment}-CreateSale'
            Handler: createSale.Handler
            CodeUri: ./src/functions/sale
            Events:
                HttpEvent:
                    Type: HttpApi
                    Properties:
                        Path: /sale
                        Method: POST
                        ApiId: !Ref PiattiRestApi
    GetSalesFunction:
        Type: AWS::Serverless::Function
        Metadata:
            BuildMethod: esbuild
            BuildProperties:
                Minify: true
                Sourcemap: true
                MainFields: "module,main"
        Properties:
            FunctionName: !Sub '${Environment}-GetSale'
            Handler: getSales.Handler
            CodeUri: ./src/functions/sale
            Events:
                HttpEvent:
                    Type: HttpApi
                    Properties:
                        Path: /sales
                        Method: GET
                        ApiId: !Ref PiattiRestApi
    GetNextDueDateFunction:
        Type: AWS::Serverless::Function
        Metadata:
            BuildMethod: esbuild
            BuildProperties:
                Minify: true
                Sourcemap: true
                MainFields: "module,main"
        Properties:
            FunctionName: !Sub '${Environment}-GetNextDueDate'
            Handler: getNextDueDate.Handler
            CodeUri: ./src/functions/sale
            Events:
                HttpEvent:
                    Type: HttpApi
                    Properties:
                        Path: /sale/getNextDueDate/{idClient}
                        Method: GET
                        ApiId: !Ref PiattiRestApi
    GetSaleByIdFunction:
        Type: AWS::Serverless::Function
        Metadata:
            BuildMethod: esbuild
            BuildProperties:
                Minify: true
                Sourcemap: true
                MainFields: "module,main"
        Properties:
            FunctionName: !Sub '${Environment}-GetSaleById'
            Handler: getSaleById.Handler
            CodeUri: ./src/functions/sale
            Events:
                HttpEvent:
                    Type: HttpApi
                    Properties:
                        Path: /sale/{idSale}
                        Method: GET
                        ApiId: !Ref PiattiRestApi
    UpdateSaleFunction:
        Type: AWS::Serverless::Function
        Metadata:
            BuildMethod: esbuild
            BuildProperties:
                Minify: true
                Sourcemap: true
                MainFields: "module,main"
        Properties:
            FunctionName: !Sub '${Environment}-Update-Sale'
            Handler: updateSale.Handler
            CodeUri: ./src/functions/sale
            Events:
                HttpEvent:
                    Type: HttpApi
                    Properties:
                        Path: /sale/{idSale}
                        Method: PUT
                        ApiId: !Ref PiattiRestApi
    DeleteSaleFunction:
        Type: AWS::Serverless::Function
        Metadata:
            BuildMethod: esbuild
            BuildProperties:
                Minify: true
                Sourcemap: true
                MainFields: "module,main"
        Properties:
            FunctionName: !Sub '${Environment}-Delete-Sale'
            Handler: deleteSale.Handler
            CodeUri: ./src/functions/sale
            Events:
                HttpEvent:
                    Type: HttpApi
                    Properties:
                        Path: /sale/{idSale}
                        Method: DELETE
                        ApiId: !Ref PiattiRestApi
    GetClientSaleFunction:
        Type: AWS::Serverless::Function
        Metadata:
            BuildMethod: esbuild
            BuildProperties:
                Minify: true
                Sourcemap: true
                MainFields: "module,main"
        Properties:
            FunctionName: !Sub '${Environment}-GetClient-Sale'
            Handler: getClientSales.Handler
            CodeUri: ./src/functions/sale
            Events:
                HttpEvent:
                    Type: HttpApi
                    Properties:
                        Path: /client/{idClient}/sales
                        Method: GET 
                        ApiId: !Ref PiattiRestApi
    AddOrRemoveProductsFunction:
        Type: AWS::Serverless::Function
        Metadata:
            BuildMethod: esbuild
            BuildProperties:
                Minify: true
                Sourcemap: true
                MainFields: "module,main"
        Properties:
            FunctionName: !Sub '${Environment}-addOrRemoveProducts'
            Handler: addOrRemoveProducts.Handler
            CodeUri: ./src/functions/sale
            Events:
                HttpEvent:
                    Type: HttpApi
                    Properties:
                        Path: /sale/{idSale}/addProducts
                        Method: POST
                        ApiId: !Ref PiattiRestApi
# # Products
    CreateProductFunction:
        Type: AWS::Serverless::Function
        Metadata:
            BuildMethod: esbuild
            BuildProperties:
                Minify: true
                Sourcemap: true
                MainFields: "module,main"
        Properties:
            FunctionName: !Sub '${Environment}-CreateProduct'
            Handler: createProduct.Handler
            CodeUri: ./src/functions/product
            Events:
                HttpEvent:
                    Type: HttpApi
                    Properties:
                        Path: /product
                        Method: POST
                        ApiId: !Ref PiattiRestApi
    GetProductsFunction:
        Type: AWS::Serverless::Function
        Metadata:
            BuildMethod: esbuild
            BuildProperties:
                Minify: true
                Sourcemap: true
                MainFields: "module,main"
        Properties:
            FunctionName: !Sub '${Environment}-GetProducts'
            Handler: getProducts.Handler
            CodeUri: ./src/functions/product
            Events:
                HttpEvent:
                    Type: HttpApi
                    Properties:
                        Path: /product
                        Method: GET
                        ApiId: !Ref PiattiRestApi
    GetProductByIdFunction:
        Type: AWS::Serverless::Function
        Metadata:
            BuildMethod: esbuild
            BuildProperties:
                Minify: true
                Sourcemap: true
                MainFields: "module,main"
        Properties:
            FunctionName: !Sub '${Environment}-GetProductById'
            Handler: getProductById.Handler
            CodeUri: ./src/functions/product
            Events:
                HttpEvent:
                    Type: HttpApi
                    Properties:
                        Path: /product/{idProduct}
                        Method: GET
                        ApiId: !Ref PiattiRestApi
    GetProductWithProviderFunction:
        Type: AWS::Serverless::Function
        Metadata:
            BuildMethod: esbuild
            BuildProperties:
                Minify: true
                Sourcemap: true
                MainFields: "module,main"
        Properties:
            FunctionName: !Sub '${Environment}-GetProductWithProvider'
            Handler: getProductWithProvider.Handler
            CodeUri: ./src/functions/product
            Events:
                HttpEvent:
                    Type: HttpApi
                    Properties:
                        Path: /products
                        Method: GET
                        ApiId: !Ref PiattiRestApi
    DeleteProductFunction:
        Type: AWS::Serverless::Function
        Metadata:
            BuildMethod: esbuild
            BuildProperties:
                Minify: true
                Sourcemap: true
                MainFields: "module,main"
        Properties:
            FunctionName: !Sub '${Environment}-delete-Product'
            Handler: deleteProduct.Handler
            CodeUri: ./src/functions/product
            Events:
                HttpEvent:
                    Type: HttpApi
                    Properties:
                        Path: /product/{idProduct}
                        Method: DELETE
                        ApiId: !Ref PiattiRestApi
    UpdateProductFunction:
        Type: AWS::Serverless::Function
        Metadata:
            BuildMethod: esbuild
            BuildProperties:
                Minify: true
                Sourcemap: true
                MainFields: "module,main"
        Properties:
            FunctionName: !Sub '${Environment}-Update-Product'
            Handler: updateProduct.Handler
            CodeUri: ./src/functions/product
            Events:
                HttpEvent:
                    Type: HttpApi
                    Properties:
                        Path: /product/{idProduct}
                        Method: PUT
                        ApiId: !Ref PiattiRestApi

# Providers
    CreateProviderFunction:
        Type: AWS::Serverless::Function
        Metadata:
            BuildMethod: esbuild
            BuildProperties:
                Minify: true
                Sourcemap: true
                # MainFields: "module,main"
        Properties:
            FunctionName: !Sub '${Environment}-Create-Provider'
            Handler: createProvider.Handler
            CodeUri: ./src/functions/provider
            Events:
                HttpEvent:
                    Type: HttpApi
                    Properties:
                        Path: /provider
                        Method: POST
                        ApiId: !Ref PiattiRestApi
    GetProvidersFunction:
        Type: AWS::Serverless::Function
        Metadata:
            BuildMethod: esbuild
            BuildProperties:
                Minify: true
                Sourcemap: true
                # MainFields: "module,main"
        Properties:
            FunctionName: !Sub '${Environment}-GetProviders'
            Handler: getProviders.Handler
            CodeUri: ./src/functions/provider
            Events:
                HttpEvent:
                    Type: HttpApi
                    Properties:
                        Path: /provider
                        Method: GET
                        ApiId: !Ref PiattiRestApi
    DeleteProviderFunction:
        Type: AWS::Serverless::Function
        Metadata:
            BuildMethod: esbuild
            BuildProperties:
                Minify: true
                Sourcemap: true
                MainFields: "module,main"
        Properties:
            FunctionName: !Sub '${Environment}-Delete-Provider'
            Handler: deleteProvider.Handler
            CodeUri: ./src/functions/provider
            Events:
                HttpEvent:
                    Type: HttpApi
                    Properties:
                        Path: /provider/{idProvider}
                        Method: DELETE
                        ApiId: !Ref PiattiRestApi
    GetProviderByIdFunction:
        Type: AWS::Serverless::Function
        Metadata:
            BuildMethod: esbuild
            BuildProperties:
                Minify: true
                Sourcemap: true
                MainFields: "module,main"
        Properties:
            FunctionName: !Sub '${Environment}-GetProvider-ById'
            Handler: getProviderById.Handler
            CodeUri: ./src/functions/provider
            Events:
                HttpEvent:
                    Type: HttpApi
                    Properties:
                        Path: /provider/{idProvider}
                        Method: GET
                        ApiId: !Ref PiattiRestApi
    UpdateProviderFunction:
        Type: AWS::Serverless::Function
        Metadata:
            BuildMethod: esbuild
            BuildProperties:
                Minify: true
                Sourcemap: true
                MainFields: "module,main"
        Properties:
            FunctionName: !Sub '${Environment}-Update-Provider'
            Handler: updateProvider.Handler
            CodeUri: ./src/functions/provider
            Events:
                HttpEvent:
                    Type: HttpApi
                    Properties:
                        Path: /provider/{idProvider}
                        Method: PUT
                        ApiId: !Ref PiattiRestApi

## Funciones de búsqueda
    SearchClientFunction:
        Type: AWS::Serverless::Function
        Metadata:
            BuildMethod: esbuild
            BuildProperties:
                Minify: true
                Sourcemap: true
                MainFields: "module,main"
        Properties:
            FunctionName: !Sub '${Environment}-SearchClients'
            Handler: searchClient.Handler
            CodeUri: ./src/functions/client
            Events:
                HttpEvent:
                    Type: HttpApi
                    Properties:
                        Path: /search/client
                        Method: GET
                        ApiId: !Ref PiattiRestApi
    SearchSaleFunction:
        Type: AWS::Serverless::Function
        Metadata:
            BuildMethod: esbuild
            BuildProperties:
                Minify: true
                Sourcemap: true
                MainFields: "module,main"
        Properties:
            FunctionName: !Sub '${Environment}-SearchSale'
            Handler: searchSale.Handler
            CodeUri: ./src/functions/sale
            Events:
                HttpEvent:
                    Type: HttpApi
                    Properties:
                        Path: /search/sale
                        Method: GET
                        ApiId: !Ref PiattiRestApi
    SearchProductFunction:
        Type: AWS::Serverless::Function
        Metadata:
            BuildMethod: esbuild
            BuildProperties:
                Minify: true
                Sourcemap: true
                MainFields: "module,main"
        Properties:
            FunctionName: !Sub '${Environment}-SearchProduct'
            Handler: searchProduct.Handler
            CodeUri: ./src/functions/product
            Events:
                HttpEvent:
                    Type: HttpApi
                    Properties:
                        Path: /search/product
                        Method: GET
                        ApiId: !Ref PiattiRestApi
    SearchProviderFunction:
        Type: AWS::Serverless::Function
        Metadata:
            BuildMethod: esbuild
            BuildProperties:
                Minify: true
                Sourcemap: true
                MainFields: "module,main"
        Properties:
            FunctionName: !Sub '${Environment}-SearchProvider'
            Handler: searchProvider.Handler
            CodeUri: ./src/functions/provider
            Events:
                HttpEvent:
                    Type: HttpApi
                    Properties:
                        Path: /search/provider
                        Method: GET
                        ApiId: !Ref PiattiRestApi
#     UpdateProductPricesFunction:
#         Type: AWS::Serverless::Function
#         Metadata:
#             BuildMethod: esbuild
#             BuildProperties:
#                 Minify: true
#                 Sourcemap: true
#         Properties:
#             FunctionName: !Sub '${Environment}-Update-Product-Prices'
#             Handler: updateProductPricesFromProvider.Handler
#             CodeUri: ./src/functions/provider
#             Events:
#                 HttpEvent:
#                     Type: HttpApi
#                     Properties:
#                         Path: /provider/{idProvider}
#                         Method: POST
#                         ApiId: !Ref PiattiRestApi

# Utils
    CountFunction:
        Type: AWS::Serverless::Function
        Metadata:
            BuildMethod: esbuild
            BuildProperties:
                Minify: true
                Sourcemap: true
                MainFields: "module,main"
        Properties:
            FunctionName: !Sub '${Environment}-Count'
            Handler: count.Handler
            CodeUri: ./src/functions/utils
            Events:
                HttpEvent:
                    Type: HttpApi
                    Properties:
                        Path: /count
                        Method: GET
                        ApiId: !Ref PiattiRestApi

# Esta url nunca cambia
Outputs:
    ApiUrl:
        Description: URL de la API
        Value: !Sub "https://${PiattiRestApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}"